openapi: 3.0.3
info:
  title: Mini E-Commerce API
  version: 1.0.0
  description: |
     E-Commerce backend.

servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: Auth
  - name: Products
  - name: Cart
  - name: Checkout
  - name: Orders
  - name: Shipping
  - name: Category

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO'
      responses:
        '201':
          description: created

  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserVTO'

  /products:
    get:
      tags: [Products]
      summary: List products
      responses:
        '200':
          description: Product list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedProductResponseVTO'
    post:
      tags: [Products]
      summary: Create a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateRequestDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVTO'

  /products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVTO'
    put:
      tags: [Products]
      summary: Update product
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequestDTO'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVTO'
    delete:
      tags: [Products]
      summary: Delete product
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '204':
          description: Deleted

  /cart:
    get:
      tags: [Cart]
      summary: Get current cart
      responses:
        '200':
          description: Cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartVTO'
    delete:
      tags: [Cart]
      summary: Clear cart
      responses:
        '204':
          description: Cleared

  /cart/items:
    post:
      tags: [Cart]
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequestDTO'
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartVTO'
    patch:
      tags: [Cart]
      summary: Update item quantity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemUpdateRequestDTO'
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartVTO'
    delete:
      tags: [Cart]
      summary: Remove item
      parameters:
        - in: query
          name: productId
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartVTO'

  /checkout:
    post:
      tags: [Checkout]
      summary: Checkout cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequestDTO'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderVTO'

  /orders:
    get:
      tags: [Orders]
      summary: List orders
      responses:
        '200':
          description: Orders list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedOrderResponseVTO'

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Get order by ID
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderVTO'

  /shipping/cost:
    post:
      tags: [Shipping]
      summary: Calculate shipping cost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingCostRequestDTO'
      responses:
        '200':
          description: Shipping cost
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingCostResponseVTO'
  /category:
    post:
      tags: [Category]
      summary: add category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '201':
          description: created

    get:
      tags: [Category]
      summary: get all categories
      responses:
        '200':
          description: all categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryVTO'
components:
  parameters:
    IdPath:
      name: id
      in: path
      required: true
      schema: { type: integer, format: int64 }

  schemas:
    RegisterRequestDTO:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
        fullName: { type: string }
      required: [email, password, fullName]

    LoginRequestDTO:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
      required: [email, password]

    PublicUserVTO:
      type: object
      properties:
        id: { type: integer }
        email: { type: string }
        fullName: { type: string }
        roles:
          type: array
          items: { type: string }

    ProductCreateRequestDTO:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        price: { type: number }
        stock: { type: integer }

    ProductUpdateRequestDTO:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        price: { type: number }
        stock: { type: integer }

    ProductVTO:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string }
        price: { type: number }
        stock: { type: integer }

    CartItemRequestDTO:
      type: object
      properties:
        productId: { type: integer }
        quantity: { type: integer }
      required: [productId, quantity]

    CartItemUpdateRequestDTO:
      type: object
      properties:
        productId: { type: integer }
        quantity: { type: integer }
      required: [productId, quantity]

    CartVTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemVTO'
        totalItems: { type: integer }
        subtotal: { type: number }

    CartItemVTO:
      type: object
      properties:
        productId: { type: integer }
        name: { type: string }
        price: { type: number }
        quantity: { type: integer }
        totalPrice: { type: number }

    CheckoutRequestDTO:
      type: object
      properties:
        address: { type: string }
        paymentMethod: { type: string }

    OrderVTO:
      type: object
      properties:
        id: { type: integer }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItemVTO' }
        total: { type: number }
        status: { type: string }

    OrderItemVTO:
      type: object
      properties:
        productId: { type: integer }
        name: { type: string }
        quantity: { type: integer }
        price: { type: number }

    ShippingCostRequestDTO:
      type: object
      properties:
        address: { type: string }
        items:
          type: array
          items:
            type: object
            properties:
              productId: { type: integer }
              quantity: { type: integer }

    ShippingCostResponseVTO:
      type: object
      properties:
        finalCost: { type: number }

    PagedProductResponseVTO:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/ProductVTO' }
        totalElements: { type: integer }

    PagedOrderResponseVTO:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/OrderVTO' }
        totalElements: { type: integer }

    LoginUserVTO:
      type: object
      properties:
        accessToken:
          type: string

    CategoryDTO:
      type: object
      properties:
        name:
          type: string

    CategoryVTO:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
